#include <iostream>
#include <vector>
#include <climits> // For INT_MAX

using namespace std;

// Structure to represent a directed edge in the graph
struct Edge {
    int src, dest, weight; // Source, destination, and weight of the edge
};

// Function to implement the Bellman-Ford algorithm
void bellmanFord(int vertices, int edgesCount, vector<Edge> &edges, int source) {
    // Step 1: Initialize distances from the source to all vertices as infinite
    vector<int> distance(vertices, INT_MAX);
    distance[source] = 0; // Distance from source to itself is always 0

    // Step 2: Relax all edges (vertices - 1) times
    for (int i = 1; i <= vertices - 1; i++) {
        for (int j = 0; j < edgesCount; j++) {
            int u = edges[j].src;    // Source vertex of edge
            int v = edges[j].dest;   // Destination vertex of edge
            int weight = edges[j].weight; // Weight of the edge

            // If the distance to the source vertex is not infinite
            // and we can improve the distance to the destination vertex
            if (distance[u] != INT_MAX && distance[u] + weight < distance[v]) {
                distance[v] = distance[u] + weight; // Update distance
            }
        }
    }

    // Step 3: Check for negative weight cycles
    for (int j = 0; j < edgesCount; j++) {
        int u = edges[j].src;
        int v = edges[j].dest;
        int weight = edges[j].weight;

        // If we can still reduce the distance, a negative weight cycle exists
        if (distance[u] != INT_MAX && distance[u] + weight < distance[v]) {
            cout << "Graph contains a negative weight cycle\n";
            return; // Exit if a negative weight cycle is detected
        }
    }

    // Print the computed shortest distances
    cout << "Vertex\tDistance from Source\n";
    for (int i = 0; i < vertices; i++) {
        if (distance[i] == INT_MAX) {
            cout << i << "\t\t" << "Infinity" << "\n"; // Unreachable vertex
        } else {
            cout << i << "\t\t" << distance[i] << "\n"; // Distance from source
        }
    }
}

int main() {
    int V = 5; // Total number of vertices in the graph
    int E = 8; // Total number of edges
    vector<Edge> edges(E); // Create a vector to store edges

    // Adding edges to the graph
    edges[0] = {0, 1, -1}; // Edge from vertex 0 to 1 with weight -1
    edges[1] = {0, 2, 4};  // Edge from vertex 0 to 2 with weight 4
    edges[2] = {1, 2, 3};  // Edge from vertex 1 to 2 with weight 3
    edges[3] = {1, 3, 2};  // Edge from vertex 1 to 3 with weight 2
    edges[4] = {1, 4, 2};  // Edge from vertex 1 to 4 with weight 2
    edges[5] = {3, 2, 5};  // Edge from vertex 3 to 2 with weight 5
    edges[6] = {3, 1, 1};  // Edge from vertex 3 to 1 with weight 1
    edges[7] = {4, 3, -3}; // Edge from vertex 4 to 3 with weight -3

    int source = 0; // Setting the starting vertex
    bellmanFord(V, E, edges, source); // Calling the Bellman-Ford function

    return 0; // End of program
}
