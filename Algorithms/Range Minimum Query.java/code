// Square Root Decomposition

import java.util.Arrays;

public class RangeMinimumQuerySqrtDecomposition {
    private int[] arr;
    private int[] blockMins;
    private int blockSize;

    public RangeMinimumQuerySqrtDecomposition(int[] arr) {
        this.arr = arr;
        this.blockSize = (int) Math.sqrt(arr.length);
        this.blockMins = new int[(arr.length + blockSize - 1) / blockSize];
        preprocess();
    }

    private void preprocess() {
        for (int i = 0; i < arr.length; i++) {
            if (i % blockSize == 0) {
                blockMins[i / blockSize] = arr[i];
            } else {
                blockMins[i / blockSize] = Math.min(blockMins[i / blockSize], arr[i]);
            }
        }
    }

    public int query(int left, int right) {
        int min = Integer.MAX_VALUE;

        // Left block
        int startBlock = left / blockSize;
        int endBlock = right / blockSize;

        if (startBlock == endBlock) {
            for (int i = left; i <= right; i++) {
                min = Math.min(min, arr[i]);
            }
        } else {
            // Left block
            for (int i = left; i < (startBlock + 1) * blockSize && i < arr.length; i++) {
                min = Math.min(min, arr[i]);
            }
            // Complete blocks
            for (int i = startBlock + 1; i < endBlock; i++) {
                min = Math.min(min, blockMins[i]);
            }
            // Right block
            for (int i = endBlock * blockSize; i <= right && i < arr.length; i++) {
                min = Math.min(min, arr[i]);
            }
        }

        return min;
    }

    public static void main(String[] args) {
        int[] array = {1, 3, 2, 7, 9, 11, 2, 6};
        RangeMinimumQuerySqrtDecomposition rmq = new RangeMinimumQuerySqrtDecomposition(array);

        System.out.println(rmq.query(1, 5)); // Output: 2
        System.out.println(rmq.query(0, 3)); // Output: 1
        System.out.println(rmq.query(3, 7)); // Output: 2
    }
}


// Sparse Table

import java.util.Arrays;

public class RangeMinimumQuerySparseTable {
    private int[][] st;
    private int[] log;
    private int n;

    public RangeMinimumQuerySparseTable(int[] arr) {
        n = arr.length;
        int maxLog = Integer.highestOneBit(n) * 2; // Maximum power of 2 less than or equal to n
        st = new int[n][maxLog];
        log = new int[n + 1];

        // Precompute logs
        for (int i = 2; i <= n; i++) {
            log[i] = log[i / 2] + 1;
        }

        // Build Sparse Table
        for (int i = 0; i < n; i++) {
            st[i][0] = arr[i];
        }

        for (int j = 1; (1 << j) <= n; j++) {
            for (int i = 0; i + (1 << j) - 1 < n; i++) {
                st[i][j] = Math.min(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]);
            }
        }
    }

    public int query(int left, int right) {
        int j = log[right - left + 1];
        return Math.min(st[left][j], st[right - (1 << j) + 1][j]);
    }

    public static void main(String[] args) {
        int[] array = {1, 3, 2, 7, 9, 11, 2, 6};
        RangeMinimumQuerySparseTable rmq = new RangeMinimumQuerySparseTable(array);

        System.out.println(rmq.query(1, 5)); // Output: 2
        System.out.println(rmq.query(0, 3)); // Output: 1
        System.out.println(rmq.query(3, 7)); // Output: 2
    }
}
