#include <iostream>
#include <vector>
#include <limits>

using namespace std;

class Edge {
public:
    int src, dest, weight;

    Edge(int s, int d, int w) : src(s), dest(d), weight(w) {}
};

class Graph {
public:
    int V; // Number of vertices
    vector<Edge> edges; // List of edges

    Graph(int v) : V(v) {}

    void addEdge(int src, int dest, int weight) {
        edges.push_back(Edge(src, dest, weight));
    }

    void bellmanFord(int src) {
        vector<int> distance(V, numeric_limits<int>::max());
        distance[src] = 0; // Distance from source to itself is always 0

        // Relax all edges |V| - 1 times
        for (int i = 1; i <= V - 1; i++) {
            for (const auto& edge : edges) {
                if (distance[edge.src] != numeric_limits<int>::max() && 
                    distance[edge.src] + edge.weight < distance[edge.dest]) {
                    distance[edge.dest] = distance[edge.src] + edge.weight;
                }
            }
        }

        // Check for negative-weight cycles
        for (const auto& edge : edges) {
            if (distance[edge.src] != numeric_limits<int>::max() && 
                distance[edge.src] + edge.weight < distance[edge.dest]) {
                cout << "Graph contains negative weight cycle" << endl;
                return;
            }
        }

        // Print the distance array
        printSolution(distance);
    }

    void printSolution(const vector<int>& distance) {
        cout << "Vertex Distance from Source" << endl;
        for (int i = 0; i < V; i++) {
            cout << i << "\t\t" << distance[i] << endl;
        }
    }
};

int main() {
    int V = 5; // Number of vertices in the graph
    Graph g(V);

    // Adding edges to the graph (source, destination, weight)
    g.addEdge(0, 1, -1);
    g.addEdge(0, 2, 4);
    g.addEdge(1, 2, 3);
    g.addEdge(1, 3, 2);
    g.addEdge(1, 4, 2);
    g.addEdge(3, 1, 1);
    g.addEdge(3, 4, 5);
    g.addEdge(4, 3, -3);

    g.bellmanFord(0); // Calculate shortest paths from source vertex 0

    return 0;
}
